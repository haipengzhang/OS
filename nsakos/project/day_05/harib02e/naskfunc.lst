     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]	;制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]
     6 00000000                                 [BITS 32]			;制作32位模式用的机械语言
     7 00000000                                 
     8 00000000                                 ;制作目标文件的信息
     9 00000000                                 
    10 00000000                                 [FILE "naskfunc.nas"]		;源文件名信息
    11 00000000                                 		GLOBAL _io_hlt,_write_mem8,_io_cli,_io_sti,_io_stihlt		;程序中包含的函数名
    12 00000000                                 		GLOBAL _io_in8,_io_in16,_io_in32
    13 00000000                                 		GLOBAL _io_out8,_io_out16,_io_out32
    14 00000000                                 		GLOBAL _io_load_eflags,_io_store_eflags
    15 00000000                                 
    16 00000000                                 ;以下是实际的函数
    17 00000000                                 
    18                                          [SECTION .text]		;目标文件中写了这些之后再写程序
    19 00000000                                 
    20 00000000                                 _io_hlt:			;void io_hlt(void)
    21 00000000 F4                              		HLT
    22 00000001 C3                              		RET
    23 00000002                                 
    24 00000002                                 _write_mem8			;void write_mem8(int addr);
    25 00000002 8B 4C 24 04                     		MOV		ECX,[ESP+4]		;[ESP+4]中存放的是地址，将其读入ECX
    26 00000006 8A 44 24 08                     		MOV		AL,[ESP+8]		;[ESP+8]中存放的是数据，将其读入AL
    27 0000000A 88 01                           		MOV		[ECX],AL
    28 0000000C C3                              		RET
    29 0000000D                                 
    30 0000000D                                 _io_cli:			;void io_cli(void)
    31 0000000D FA                              		CLI
    32 0000000E C3                              		RET
    33 0000000F                                 
    34 0000000F                                 _io_sti:			;void io_sti(void)
    35 0000000F FB                              		STI
    36 00000010 C3                              		RET
    37 00000011                                 
    38 00000011                                 _io_stihlt:			;void io_stihlt(void)
    39 00000011 FB                              		STI
    40 00000012 F4                              		HLT
    41 00000013 C3                              		RET
    42 00000014                                 
    43 00000014                                 _io_in8:			;void io_in8(int port);
    44 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]
    45 00000018 B8 00000000                     		MOV		EAX,0
    46 0000001D EC                              		IN 		AL,DX
    47 0000001E C3                              		RET
    48 0000001F                                 
    49 0000001F                                 _io_in16:			;int io_in16(int port)
    50 0000001F 8B 54 24 04                     		MOV 	EDX,[ESP+4]
    51 00000023 B8 00000000                     		MOV		EAX,0
    52 00000028 66 ED                           		IN 		AX,DX
    53 0000002A C3                              		RET
    54 0000002B                                 
    55 0000002B                                 _io_in32:			;int io_in32(int port)
    56 0000002B 8B 54 24 04                     		MOV 	EDX,[ESP+4]
    57 0000002F B8 00000000                     		MOV		EAX,0
    58 00000034 ED                              		IN 		EAX,DX
    59 00000035 C3                              		RET
    60 00000036                                 
    61 00000036                                 _io_out8			;void io_out8(int port, int data);
    62 00000036 8B 54 24 04                     		MOV		EDX,[ESP+4]
    63 0000003A 8A 44 24 08                     		MOV		AL,[ESP+8]
    64 0000003E EE                              		OUT 	DX,AL
    65 0000003F C3                              		RET
    66 00000040                                 
    67 00000040                                 _io_out16			;void io_out16(int port, int data);
    68 00000040 8B 54 24 04                     		MOV		EDX,[ESP+4]
    69 00000044 8A 44 24 08                     		MOV		AL,[ESP+8]
    70 00000048 66 EF                           		OUT 	DX,AX
    71 0000004A C3                              		RET
    72 0000004B                                 
    73 0000004B                                 _io_out32			;void io_out32(int port, int data);
    74 0000004B 8B 54 24 04                     		MOV		EDX,[ESP+4]
    75 0000004F 8A 44 24 08                     		MOV		AL,[ESP+8]
    76 00000053 EF                              		OUT 	DX,EAX
    77 00000054 C3                              		RET
    78 00000055                                 
    79 00000055                                 _io_load_eflags			;int io_load_eflags(void);
    80 00000055 9C                              		PUSHFD			;指 PUSH EFLAGS
    81 00000056 58                              		POP		EAX
    82 00000057 C3                              		RET
    83 00000058                                 
    84 00000058                                 _io_store_eflags		;void io_store_eflags(int flags)
    85 00000058 8B 44 24 04                     		MOV		EAX,[ESP+4]
    86 0000005C 50                              		PUSH 	EAX
    87 0000005D 9D                              		POPFD	;指 POP EFLAGS
    88 0000005E C3                              		RET